<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="unity"
             type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
    <sectionGroup name="dataflow">
      <section name="computeNode"
               allowDefinition="Everywhere"
               type="AISTek.DataFlow.ComputeNode.Service.Configuration.ComputeNodeConfiguration, DataFlow.ComputeNode.Service" />
    </sectionGroup>
  </configSections>

  <unity>
    <typeAliases>
      <typeAlias alias="singleton"
                 type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity" />
    </typeAliases>
    <containers>
      <container>
        <types>
          <type type="AISTek.DataFlow.ComputeNode.Service.WebInterfaceHostService, DataFlow.ComputeNode.Service"
                mapTo="AISTek.DataFlow.ComputeNode.Service.WebInterfaceHostService, DataFlow.ComputeNode.Service">
            <lifetime type="singleton" />
          </type>

          <type type="AISTek.DataFlow.ComputeNode.Service.WebView.IWebInterface, DataFlow.ComputeNode.Service"
                mapTo="AISTek.DataFlow.ComputeNode.Service.WebView.WebInterface, DataFlow.ComputeNode.Service">
            <lifetime type="singleton" />
          </type>

          <type type="AISTek.DataFlow.ComputeNode.Service.WebView.IWebInterfaceBuilder, DataFlow.ComputeNode.Service"
                mapTo="AISTek.DataFlow.ComputeNode.Service.WebView.WebInterfaceBuilder, DataFlow.ComputeNode.Service">
          </type>

          <type type="AISTek.DataFlow.ComputeNode.Classes.IExecutionStatus, DataFlow.ComputeNode.Classes"
                mapTo="AISTek.DataFlow.ComputeNode.Service.ExecutionStatus, DataFlow.ComputeNode.Service">
            <lifetime type="singleton" />
          </type>

          <type type="AISTek.DataFlow.ComputeNode.Classes.IExecutionCoreConfiguration, DataFlow.ComputeNode.Classes"
                mapTo="AISTek.DataFlow.ComputeNode.Service.Configuration.ExecutionCoreConfiguration, DataFlow.ComputeNode.Service">
          </type>
          <type type="AISTek.DataFlow.Shared.Classes.ISystemResources, DataFlow.Shared.Classes"
                mapTo="AISTek.DataFlow.ComputeNode.Service.SystemResourceProviders.SystemResources, DataFlow.ComputeNode.Service">
          </type>
          <type type="AISTek.DataFlow.Shared.Client.ITaskProviderClientFactory, DataFlow.Shared.Client"
                mapTo="AISTek.DataFlow.Shared.Client.TaskProviderClientFactory, DataFlow.Shared.Client">
          </type>
          <type type="AISTek.DataFlow.Shared.Client.IRepositoryClientFactory, DataFlow.Shared.Client"
                mapTo="AISTek.DataFlow.Shared.Client.RepositoryClientFactory, DataFlow.Shared.Client">
          </type>
          <type type="AISTek.DataFlow.ComputeNode.Classes.IExecutionCore, DataFlow.ComputeNode.Classes"
                mapTo="AISTek.DataFlow.ComputeNode.ExecutionCore.GeneralCore, DataFlow.ComputeNode.ExecutionCore">
          </type>
          <type type="AISTek.DataFlow.ComputeNode.Classes.IExecutionEngine, DataFlow.ComputeNode.Classes"
                mapTo="AISTek.DataFlow.ComputeNode.Engine.SandboxEngine, DataFlow.ComputeNode.Engine">
          </type>

          <type type="AISTek.DataFlow.ComputeNode.Classes.IWrapperFactory, DataFlow.ComputeNode.Classes"
                mapTo="AISTek.DataFlow.ComputeNode.Service.WrapperFactory, DataFlow.ComputeNode.Service">
          </type>
        </types>
      </container>
    </containers>
  </unity>

  <dataflow>
    <computeNode sandbox="AISTek.DataFlow.ComputeNode.Engine.GeneralEngine, DataFlow.ComputeNode.Engine">
    </computeNode>
  </dataflow>

  <system.serviceModel>
    <bindings>
      <basicHttpBinding>
        <binding name="RepositoryBinding"
                   closeTimeout="00:01:00"
                   openTimeout="0:01:00"
                   receiveTimeout="0:10:00"
                   sendTimeout="0:10:00"
                   transferMode="Streamed"
                   messageEncoding="Mtom"
                   maxReceivedMessageSize="268435456">
          <security mode="None">
            <transport clientCredentialType="None"/>
          </security>
        </binding>
      </basicHttpBinding>
      <wsHttpBinding>
        <binding name="TaskProviderBinding"
                 closeTimeout="0:00:10"
                 openTimeout="0:00:30"
                 receiveTimeout="0:01:00"
                 sendTimeout="0:00:10"
                 allowCookies="true"  >
          <security mode="Message" />
        </binding>
      </wsHttpBinding>
      <netTcpBinding>
        <binding name="TcpRepositoryBinding"
                 transferMode="Streamed"
                 maxReceivedMessageSize="268435456">
          <security mode="None">
            <transport clientCredentialType="None" />
            <message clientCredentialType="None" />
          </security>
        </binding>
      </netTcpBinding>
    </bindings>

    <client>
      <endpoint address="http://localhost:8080/Scheduler/TaskProvider.svc"
                binding="wsHttpBinding"
                bindingConfiguration="TaskProviderBinding"
                contract="DataFlow.Scheduler.ITaskProvider"
                name="DataFlow.Scheduler.ITaskProvider">
      </endpoint>

      <endpoint address="net.tcp://localhost:1000/df/repository"
                binding="netTcpBinding"
                bindingConfiguration="TcpRepositoryBinding"
                contract="DataFlow.Repository.IRepositoryService"
                name="DataFlow.Repository.IRepositoryService"/>

      <!--<endpoint address="http://localhost:8080/Repository/Repository.svc"
                binding="basicHttpBinding"
                bindingConfiguration="RepositoryBinding"
                contract="DataFlow.Repository.IRepositoryService"
                name="DataFlow.Repository.IRepositoryService" />-->
    </client>
  </system.serviceModel>

</configuration>